import {
    getDateFormat,
    OrganizationProject,
    TimeFrames,
} from '@lightdash/common';
import { Avatar, Box, Button, Stack, Text, Title } from '@mantine/core';
import { useClipboard } from '@mantine/hooks';
import { IconClock, IconCopy } from '@tabler/icons-react';
import moment from 'moment';
import { FC, useCallback, useEffect, useMemo, useRef } from 'react';
import { useQueryClient } from 'react-query';
import { useHistory } from 'react-router-dom';
import useToaster from '../../../hooks/toaster/useToaster';
import { useCreateAccessToken } from '../../../hooks/useAccessToken';
import { useProjects } from '../../../hooks/useProjects';
import { FloatingBackButton } from '../../../pages/CreateProject.styles';
import { useTracking } from '../../../providers/TrackingProvider';
import { EventName } from '../../../types/Events';
import MantineIcon from '../../common/MantineIcon';
import { ProjectCreationCard } from '../../common/Settings/SettingsCard';
import { Wrapper } from './ProjectConnectFlow.styles';

interface ConnectUsingCliProps {
    siteUrl: string;
    version: string;
    onBack: () => void;
}

const codeBlock = ({
    siteUrl,
    loginToken,
    version,
}: {
    siteUrl: string;
    loginToken?: string;
    version: string;
}) =>
    String.raw`
#1 install lightdash CLI
npm install -g @lightdash/cli@${version}

#2 login to lightdash
lightdash login ${siteUrl} --token ${loginToken}

#3 create project
lightdash deploy --create
`.trim();

const ConnectUsingCLI: FC<ConnectUsingCliProps> = ({
    siteUrl,
    version,
    onBack,
}) => {
    const history = useHistory();
    const initialProjectFetch = useRef(false);
    const existingProjects = useRef<OrganizationProject[]>();
    const { showToastSuccess } = useToaster();
    const queryClient = useQueryClient();
    const { track } = useTracking();
    const clipboard = useClipboard({ timeout: 200 });

    const {
        mutate: mutateAccessToken,
        data: tokenData,
        isLoading: isTokenCreating,
        isSuccess: isTokenCreated,
    } = useCreateAccessToken();

    useEffect(() => {
        if (isTokenCreated) return;

        const expiresAt = moment().add(30, 'days').toDate();
        const generatedAtString = moment().format(
            getDateFormat(TimeFrames.SECOND),
        );

        mutateAccessToken({
            expiresAt,
            description: `Generated by the Lightdash UI for CLI at ${generatedAtString}`,
            autoGenerated: true,
        });
    }, [mutateAccessToken, isTokenCreated]);

    useProjects({
        refetchInterval: 3000,
        refetchIntervalInBackground: true,
        onSuccess: async (newProjects) => {
            if (!initialProjectFetch.current) {
                existingProjects.current = newProjects;
                initialProjectFetch.current = true;
            }

            if (
                existingProjects.current &&
                existingProjects.current.length < newProjects.length
            ) {
                const uuids = newProjects.map((p) => p.projectUuid);
                const existingUuids = existingProjects.current.map(
                    (p) => p.projectUuid,
                );

                const newProjectUuid = uuids.find(
                    (uuid) => !existingUuids.includes(uuid),
                );

                await queryClient.invalidateQueries('organization');

                history.replace(
                    `/createProject/cli?projectUuid=${newProjectUuid}`,
                );
            }
        },
    });

    const codeBlockText = useMemo(() => {
        return codeBlock({
            siteUrl,
            version,
            loginToken: tokenData?.token,
        });
    }, [siteUrl, version, tokenData?.token]);

    const handleCopy = useCallback(() => {
        clipboard.copy(codeBlockText);

        showToastSuccess({ title: 'Commands copied to clipboard!' });
        track({ name: EventName.COPY_CREATE_PROJECT_CODE_BUTTON_CLICKED });
    }, [showToastSuccess, track, clipboard, codeBlockText]);

    if (isTokenCreating || !isTokenCreated || !tokenData) {
        // TODO: loader?
        return null;
    }

    return (
        <Wrapper>
            <FloatingBackButton
                icon="chevron-left"
                text="Back"
                onClick={onBack}
            />

            <ProjectCreationCard>
                <Stack>
                    <Stack align="center" spacing="sm">
                        <Avatar size="lg" radius="xl">
                            <MantineIcon
                                icon={IconClock}
                                size="xxl"
                                strokeWidth={1.5}
                                color="black"
                            />
                        </Avatar>

                        <Stack spacing="xxs">
                            <Title order={3} fw={500}>
                                Waiting for data
                            </Title>
                            <Text color="dimmed">
                                Inside your dbt project, run:
                            </Text>
                        </Stack>
                    </Stack>

                    <Box pos="relative">
                        <Box
                            m={0}
                            py="sm"
                            px="md"
                            component="pre"
                            ff="monospace"
                            bg="gray.0"
                            c="gray.8"
                            ta="left"
                            sx={(theme) => ({
                                overflowX: 'auto',
                                borderRadius: theme.radius.sm,
                            })}
                        >
                            {codeBlockText}
                        </Box>

                        <Button
                            pos="absolute"
                            right={12}
                            bottom={12}
                            variant="outline"
                            size="xs"
                            leftIcon={<MantineIcon icon={IconCopy} />}
                            onClick={handleCopy}
                        >
                            Copy
                        </Button>
                    </Box>
                </Stack>
            </ProjectCreationCard>
        </Wrapper>
    );
};

export default ConnectUsingCLI;
